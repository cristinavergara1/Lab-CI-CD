# Workflow name
name: DI/CD Pipeline

on:
  # Manually trigger workflow runs
  workflow_dispatch:
  # Trigger the workflow on push from the main branch
  push:
    branches:
      - main
      - nueva-rama

jobs:
  # Test job
  tests:
    name: Unit tests
    # Run on Ubuntu using the latest version
    runs-on: ubuntu-latest

    # Job steps
    steps:
      # Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1

      # Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      # Set up Maven cache
      - name: Cache Maven packages
        # This action allows caching dependencies and build outputs to improve workflow execution time
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Run Tests
      - name: Run Tests
        run: mvn -B test

  #Sonar's Job
  sonar:
    #depends on test's jod
    needs: tests
    name: SonarCloud analysis
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check out your repository under $GITHUB_WORKSPACE ,as your workflow can access it
      - uses: actions/checkout@v1
      #SEt up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
      #Set up Sonar Cloud  cache
      - name: Cache SonarCloud packages
        #This actions allowscaching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      #Set up Maven cache
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Analyze project with SonarCloud
      - name: Analyze with SonarCloud
        run: mvn -B verify sonar:sonar -Dsonar.projectKey=cristinavergara1_labcicd -Dsonar.organization=cristinavergara1  -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONARTOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONARTOKEN: ${{ secrets.SONARTOKEN }}
  #Build's job
  build:
    #Depends on sonar´s job
    needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps :
      #Check out your repository under $GITHUB_WORKSPACE ,as your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build ouputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -Dskiptest --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #this uploads artifact from your workflow allowing you
        uses: actions/upload-artifact@v3
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/labcicd-0.0.1-SNAPSHOT.jar
      #Docker
      create-docker-image:
        name: Build Image - Crear imagen docker
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v2
          - name: Configurar Credenciales de AWS
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: us-west-1

          - name: Iniciar sesión en AWS ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1

          - name: Crear, etiquetar y enviar imágen a AWS ECR
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              ECR_REPOSITORY: lab
              IMAGE_TAG: latest
            run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
          name: Enviar imagen docker a AWS ECS
          runs-on: ubuntu-latest
          needs: create-docker-image
          steps:
            - name: Configurar Credenciales de AWS
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-west-1

            - name: Actualizar versión en ECS
              run: |
                aws ecs update-service --cluster Lab --service ServicioTest --task-definition Taks-Lab --force-new-deployment
      #Coveralls
      - name: Upload to Coveralls
        run: mvn coveralls:report -DrepoToken=${{ secrets.COVERALLS_REPO_TOKEN }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}


  # Snyk Job
  snyk:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}








